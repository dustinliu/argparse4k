buildscript {
    ext.kotlin_version = '1.2.10'
    ext.dokka_version = '0.9.14'
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.2'
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:${dokka_version}"
    }
}

plugins {
    id 'net.researchgate.release' version '2.6.0'
    id "com.jfrog.bintray" version "1.7.3"
}

apply plugin: 'kotlin'
apply plugin: "jacoco"
apply plugin: 'org.junit.platform.gradle.plugin'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'org.jetbrains.dokka'

repositories {
    mavenCentral()
    jcenter()
}

group = 'org.dustinl.argparse4k'
description = 'The Kotlin command-line argument parser library'
def repoUrl = 'https://github.com/dustinliu/argparse4k'
def vcsUrl = 'https://github.com/dustinliu/argparse4k.git'

dependencies {
    compile 'org.slf4j:slf4j-api:1.7.25'
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    compile 'net.sourceforge.argparse4j:argparse4j:0.8.1'
    testCompile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    testCompile 'org.junit.jupiter:junit-jupiter-api:5.0.2'
    testRuntime("org.junit.jupiter:junit-jupiter-engine:5.0.2")
    testCompile 'org.mockito:mockito-inline:2.13.0'
    testRuntime 'ch.qos.logback:logback-classic:1.2.3'

}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

junitPlatform {
    platformVersion '1.0.2' // optional, defaults to plugin version
    reportsDir file('build/test-results/junit-platform') // this is the default
    selectors {
        packages 'org.dustinl.argparse4k'
    }
}

jacoco {
    toolVersion = "0.8.0"
    reportsDir = file("$buildDir/jacoco/")
}

jacocoTestReport {
//    classDirectories = files("${buildDir}/classes")

    reports {
        xml.enabled true
        csv.enabled false
        html.destination file("${buildDir}/jacoco/jacocoHtml")
    }
}

dokka {
    outputFormat = 'javadoc'
    outputDirectory = javadoc.destinationDir
}

task kdocJar(type: Jar, dependsOn: dokka) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_API_KEY')
    publications = ['mavenRelease']

    publish = true
    override = false
    pkg {
        repo = 'maven'
        name = project.name
        desc = project.description
        websiteUrl = repoUrl
        issueTrackerUrl = '${repoUrl}/issues'
        licenses = ['BSD 3-clause']
        vcsUrl = vcsUrl
    }

    pkg.version {
        name = version
        gpg {
            sign = true
        }
        mavenCentralSync {
            sync = true
            user = System.getenv('OSS_USER')
            password = System.getenv('OSS_PW')
        }
    }
}

def pomConfig = {
    licenses {
        license {
            name 'BSD 3-clause "New" or "Revised" License'
            url 'https://github.com/dustinliu/argparse4k/blob/master/LICENSE'
            distribution 'repo'
        }
    }
    developers {
        developer {
            id 'dustinliu'
            name 'Min Lun Liu'
            email 'liu.minlun@gmail.com'
        }
    }
    scm {
        connection "scm:git:${vcsUrl}"
        developerConnection "scm:git:${vcsUrl}"
        url repoUrl
    }
}

publishing {
    publications {
        mavenRelease(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact kdocJar
            pom.withXml {
                def root = asNode()
                root.appendNode('description', project.description)
                root.appendNode('name', project.name)
                root.appendNode('url', repoUrl)
                root.children().last() + pomConfig
            }
        }
    }
}

release {
    failOnUnversionedFiles = false
    failOnCommitNeeded = true
    tagTemplate = '$name-$version'
    newVersionCommitMessage = '[Gradle Release Plugin] [skip ci] new version release:'
}

afterReleaseBuild.dependsOn bintrayUpload
